#include <osmscout/TypeConfig.h>

#include <osmscout/util/String.h>

COMPILER OST

std::string Destring(const char* str)
{
  std::string result(str);

  if (result.length()>=2 &&
      result[0]=='"' &&
      result[result.length()-1]=='"') {
    result=result.substr(1,result.length()-2);
  }

  return result;
}

CHARACTERS
  letter     = 'a'..'z' + 'A'..'Z'.
  digit      = '0'..'9'.
  eol        = '\n'.
  stringchar = ANY - '"'.
  quotchar   = ANY.

TOKENS
  ident      = letter {letter | digit | '_'}.
  number     = digit {digit}.
  string     = '"' {stringchar | '\\' quotchar} '"'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO eol

IGNORE '\t' + '\r' + '\n'

PRODUCTIONS
  OST         = SYNC "OST"
                [MAXSPEEDS]
                [GRADES]
                [TYPES]
                "END"
                .

  MAXSPEEDS   = SYNC "MAX" "SPEEDS"
                MAXSPEED {MAXSPEED}
                .

  MAXSPEED    = (.
                  std::string alias;
                  size_t      speed; 
                .)
                SYNC "SPEED"
                STRING<alias>
                "="
                UINT<speed>
                (.
                  if (speed>0 && speed<256) {
                    config.RegisterMaxSpeedAlias(alias,
                                                 (uint8_t)speed);
                  }
                  else {
                       std::string e="Speed value not in the allowed range (]0..255] km/h)";

                       SemErr(e.c_str());
                  }
                .)
                [
                "km/h"
                ]
                .


  GRADES      = SYNC "GRADES"
                GRADE {GRADE}
                .

  GRADE       = (.
                  size_t grade;
                .)
                SYNC "SURFACE" "GRADE"
                UINT<grade>
                "{"
                 {
                   (.
                     std::string surface;
                   .)

                   STRING<surface>
                   (.
                     if (grade>=1 && grade<=5) {
                       config.RegisterSurfaceToGradeMapping(surface,
                                                            grade);
                     }
                     else {
                       std::string e="Not a valid grade level: "+NumberToString(grade);

                       SemErr(e.c_str());
                     }
                   .)
                 }
                "}"
                .

  TYPES       = SYNC "TYPES"
                TYPE {TYPE}
                .

  TYPE        = (.
                  std::string     name;
                  TagConditionRef condition=NULL;
                  TypeInfoRef     typeInfo;
                  unsigned char   types;
                .)
                SYNC "TYPE"
                IDENT<name>                       (. typeInfo=std::make_shared<TypeInfo>(name); .)
                [
                  "IGNORE"                        (. typeInfo->SetIgnore(true); .)
                ]

                "="
                TYPEKINDS<types>
                "(" TAGCONDITION<condition> ")"   (. typeInfo->AddCondition(types,condition); .)

                {
                  "OR"
                  TYPEKINDS<types>
                  "(" TAGCONDITION<condition> ")" (. typeInfo->AddCondition(types,condition); .)
                }

                [
                  "{"
                  [
                    FEATURE<*typeInfo>
                    {
                      ","
                      FEATURE<*typeInfo>
                    }
                  ]  
                  "}"
                ]

                [
                  TYPEOPTIONS<*typeInfo>
                ]

                [
                  GROUPS<*typeInfo>
                ]
                (.
                  config.RegisterType(typeInfo);
                .)
                .

  TAGCONDITION<TagConditionRef& condition>
              = (.
                  std::list<TagConditionRef> conditions;
                  TagConditionRef            subCond;
                .)
                TAGANDCOND<subCond>   (. conditions.push_back(subCond); .)
                {
                  "OR"
                  TAGANDCOND<subCond> (. conditions.push_back(subCond); .)
                }
                (.
                  if (conditions.size()==1) {
                    condition=conditions.front();
                  }
                  else {
                    TagBoolConditionRef orCondition=std::make_shared<TagBoolCondition>(TagBoolCondition::boolOr);

                    for (const auto& c : conditions) {
                      orCondition->AddCondition(c);
                    }

                    condition=orCondition;
                  }
                .)
                .
  TAGANDCOND<TagConditionRef& condition>
              = (.
                  std::list<TagConditionRef> conditions;
                  TagConditionRef            subCond;
                .)
                TAGBOOLCOND<subCond>     (. conditions.push_back(subCond); .)
                {
                  "AND"
                  TAGBOOLCOND<subCond>   (. conditions.push_back(subCond); .)
                }
                (.
                  if (conditions.size()==1) {
                    condition=conditions.front();
                  }
                  else {
                    TagBoolConditionRef andCondition=std::make_shared<TagBoolCondition>(TagBoolCondition::boolAnd);

                    for (const auto& c : conditions) {
                      andCondition->AddCondition(c);
                    }

                    condition=andCondition;
                  }
                .)
                .
  TAGBOOLCOND<TagConditionRef& condition>
              =   TAGBINCOND<condition>
                | TAGEXISTSCOND<condition>
                | "(" TAGCONDITION<condition> ")"
                | "!" TAGBOOLCOND<condition> (. condition=std::make_shared<TagNotCondition>(condition); .)
                .

  TAGBINCOND<TagConditionRef& condition>
              = (.
                  std::string nameValue;
                .)
                string (. nameValue=Destring(t->val); .)
                (
                  TAGLESSCOND<nameValue,condition>
                | TAGLESSEQUALCOND<nameValue,condition>
                | TAGEQUALSCOND<nameValue,condition>
                | TAGNOTEQUALSCOND<nameValue,condition>
                | TAGGREATERCOND<nameValue,condition>
                | TAGGREATEREQUALCOND<nameValue,condition>
                | TAGISINCOND<nameValue,condition>
                )
                .

  TAGLESSCOND<const std::string& tagName,TagConditionRef& condition>
              = (.
                  std::string stringValue;
                  size_t      sizeValue;
                .)
                "<"
                (
                  STRING<stringValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorLess,stringValue);
                  .)
                |
                  UINT<sizeValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorLess,sizeValue);
                  .)
                )
                .

  TAGLESSEQUALCOND<const std::string& tagName,TagConditionRef& condition>
              = (.
                  std::string stringValue;
                  size_t      sizeValue;
                .)
                "<="
                (
                  STRING<stringValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorLessEqual,stringValue);
                  .)
                |
                  UINT<sizeValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorLessEqual,sizeValue);
                  .)
                )
                .

  TAGEQUALSCOND<const std::string& tagName,TagConditionRef& condition>
              = (.
                  std::string stringValue;
                  size_t      sizeValue;
                .)
                "=="
                (
                  STRING<stringValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorEqual,stringValue);
                  .)
                |
                  UINT<sizeValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorEqual,sizeValue);
                  .)
                )
                .

  TAGNOTEQUALSCOND<const std::string& tagName,TagConditionRef& condition>
              = (.
                  std::string stringValue;
                  size_t      sizeValue;
                .)
                "!="
                (
                  STRING<stringValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorNotEqual,stringValue);
                  .)
                |
                  UINT<sizeValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorNotEqual,sizeValue);
                  .)
                )
                .

  TAGGREATEREQUALCOND<const std::string& tagName,TagConditionRef& condition>
              = (.
                  std::string stringValue;
                  size_t      sizeValue;
                .)
                ">="
                (
                  STRING<stringValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorGreaterEqual,stringValue);
                  .)
                |
                  UINT<sizeValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorGreaterEqual,sizeValue);
                  .)
                )
                .

  TAGGREATERCOND<const std::string& tagName,TagConditionRef& condition>
              = (.
                  std::string stringValue;
                  size_t      sizeValue;
                .)
                ">"
                (
                  STRING<stringValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorGreater,stringValue);
                  .)
                |
                  UINT<sizeValue>
                  (.
                    TagId tagId=config.RegisterTag(tagName);

                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorGreater,sizeValue);
                  .)
                )
                .

  TAGISINCOND<const std::string& tagName,TagConditionRef& condition>
              = (.
                 std::list<std::string> values;
                .)
                "IN"
                "["
                string   (. values.push_back(Destring(t->val)); .)
                {
                  ","
                  string (. values.push_back(Destring(t->val)); .)
                }
                "]"
                (.
                  TagId tagId=config.RegisterTag(tagName);

                  if (values.size()==1) {
                    condition=std::make_shared<TagBinaryCondition>(tagId,operatorEqual,values.front());
                  }
                  else {
                    TagIsInConditionRef isInCondition=std::make_shared<TagIsInCondition>(tagId);

                    for (const auto& s : values) {
                      isInCondition->AddTagValue(s);
                    }

                    condition=isInCondition;
                  }
                .)
                .

  TAGEXISTSCOND<TagConditionRef& condition>
              = "EXISTS"
                 string
                 (.
                   condition=std::make_shared<TagExistsCondition>(config.RegisterTag(Destring(t->val)));
                 .)
                 .

  TYPEKINDS<unsigned char& types>
              = (.
                  types=0;
                .)

                TYPEKIND<types>

                {
                  [
                    ","
                  ]
                  TYPEKIND<types>
                }
                .

  TYPEKIND<unsigned char& types>
              =  "NODE"      (. types|=TypeInfo::typeNode; .)
               | "WAY"       (. types|=TypeInfo::typeWay; .)
               | "AREA"      (. types|=TypeInfo::typeArea; .)
               | "RELATION"  (. types|=TypeInfo::typeRelation; .)
               .

  FEATURE <TypeInfo& typeInfo>
              = (. std::string name; .)
                IDENT<name>
                (.
                  FeatureRef feature=config.GetFeature(name);
                  
                  if (feature) {
                    if (!typeInfo.HasFeature(name)) {
                      typeInfo.AddFeature(feature);
                    }
                    else {
                    std::string e="Feature '"+name+"' has been already assigned to type";

                    SemErr(e.c_str());
                    }
                  }
                  else {
                    std::string e="Feature '"+name+"' is unknown";

                    SemErr(e.c_str());
                  }                
                .)
                .

  TYPEOPTIONS<TypeInfo& typeInfo>
              = TYPEOPTION<typeInfo>
                {
                  TYPEOPTION<typeInfo>
                }
                .

  TYPEOPTION<TypeInfo& typeInfo>
              =  PATH<typeInfo>                                               // TODO: Only valid for WAY and AREA
               | "LOCATION"          (. typeInfo.SetIndexAsLocation(true); .) // TODO: Only valid for WAY
               | "ADMIN_REGION"      (. typeInfo.SetIndexAsRegion(true); .)   // TODO: Only valid for AREA
               | "ADDRESS"           (. typeInfo.SetIndexAsAddress(true); .)  // TODO: Only valid for NODE and AREA
               | "POI"               (. typeInfo.SetIndexAsPOI(true); .)      // TODO: Only valid for NODE and AREA
               | "OPTIMIZE_LOW_ZOOM" (. typeInfo.SetOptimizeLowZoom(true); .) // TODO: Only valid for WAY AND AREA
               | "MULTIPOLYGON"      (. typeInfo.SetMultipolygon(true); .)    // TODO: Only valid for AREA
               | "PIN_WAY"           (. typeInfo.SetPinWay(true); .)          // TODO: Only valid for WAY
               | "MERGE_AREAS"       (. typeInfo.SetMergeAreas(true); .)      // TODO: Only valid for AREA
               | "IGNORESEALAND"     (. typeInfo.SetIgnoreSeaLand(true); .)
               .

  PATH<TypeInfo& typeInfo>
              = "PATH"
                (. typeInfo.SetIsPath(true); .)
                [
                  "["
                     [
                       "FOOT"
                       (.
                         typeInfo.CanRouteFoot(true);
                       .)
                     ]

                     [
                       "BICYCLE"
                       (.
                         typeInfo.CanRouteBicycle(true);
                       .)
                     ]

                     [
                       "CAR"
                       (.
                         typeInfo.CanRouteCar(true);
                       .)
                     ]
                  "]"
                ]
                .

  GROUPS<TypeInfo& typeInfo>
              = "GROUP"
                (. std::string groupName; .)
                IDENT<groupName>
                (. typeInfo.AddGroup(groupName); .)
                {
                  ","
                  IDENT<groupName>
                  (. typeInfo.AddGroup(groupName); .)
                }
                .


  IDENT<std::string& value>
              = ident
                (.
                  value=t->val;
                .)
                .

  STRING<std::string& value>
              = string
                (.
                  value=Destring(t->val);
                .)
                .

  UINT<size_t& value>
              = number
                (.
                  if (!StringToNumber(t->val,value)) {
                    std::string e="Cannot parse number '"+std::string(t->val)+"'";

                    SemErr(e.c_str());
                  }
                .)
                .
END OST.

